#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(local_size_x = 16, local_size_y = 16) in;
layout(binding = 1) uniform samplerCube environmentMap;
layout(binding = 3, rgba16f) writeonly uniform imageCube prefilteredMap;
layout(binding = 6) uniform UBO {
    vec2 mipmapSize;
    float roughness;
} ubo;


vec3 cubeCoordToWorld(ivec3 cubeCoord, vec2 cubemapSize);

vec2 cubemapSize = vec2(ubo.mipmapSize.x, ubo.mipmapSize.y);
float originalSamples = cubemapSize.x * cubemapSize.y;
uint totalSamples = uint(ubo.mipmapSize.x);

// importance sampling GGX NDF 
vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness);
vec2 hammersleySequence(uint i, uint N);
float d_ggx(float dotNH, float roughness);

const float PI = 3.14159265359;


void main()
{   
    ivec3 cubeCoord = ivec3(gl_GlobalInvocationID);
    vec3 worldPos = cubeCoordToWorld(cubeCoord, ubo.mipmapSize);
    // tagent space from origin point
    vec3 N = normalize(worldPos);
    // assume view direction always equal to outgoing direction
    vec3 R = N;
    vec3 V = N;

    float roughness = max(ubo.roughness, 0.04);
    float totalWeight = 0.0;   
    vec3 prefilteredColor = vec3(0.0);     
    for(uint i = 0u; i < totalSamples; ++i)
    {
        // generate sample vector towards the alignment of the specular lobe
        vec2 Xi = hammersleySequence(i, totalSamples);
        vec3 H = importanceSampleGGX(Xi, N, roughness);
        float dotHV = dot(H, V);
        vec3 L = normalize(2.0 * dotHV * H - V);

        float dotNL = max(dot(N, L), 0.0);
        if(dotNL > 0.0)
        {
            float dotNH = max(dot(N, H), 0.0);
            dotHV = max(dotHV, 0.0);
            // sample from the environment's mip level based on roughness/pdf
            float D = d_ggx(dotNH, roughness);
            float pdf = D * dotNH / (4.0 * dotHV) + 0.0001; 

            float saTexel  = 4.0 * PI / (6.0 * originalSamples);
            float saSample = 1.0 / (totalSamples * pdf + 0.0001);
            float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel); 

            prefilteredColor += textureLod(environmentMap, L, mipLevel).rgb * dotNL;
            totalWeight += dotNL;
        }
    }
    prefilteredColor = prefilteredColor / totalWeight;

    imageStore(prefilteredMap, cubeCoord, vec4(prefilteredColor, 1.0));
}



// Van Der Corpus sequence
// @see http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
float vdcSequence(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// Hammersley sequence
// @see http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
vec2 hammersleySequence(uint i, uint N)
{
    return vec2(float(i) / float(N), vdcSequence(i));
}

// GGX NDF via importance sampling
vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float alpha = roughness * roughness;
    float alpha2 = alpha * alpha;
    
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alpha2 - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    
    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
    
    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
    
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
} 

vec3 cubeCoordToWorld(ivec3 cubeCoord, vec2 cubemapSize)
{
    vec2 texCoord = vec2(cubeCoord.xy) / cubemapSize;
    texCoord = texCoord  * 2.0 - 1.0; // -1..1
    switch(cubeCoord.z)
    {
        case 0: return vec3(1.0, -texCoord.yx); // posx
        case 1: return vec3(-1.0, -texCoord.y, texCoord.x); //negx
        case 2: return vec3(texCoord.x, 1.0, texCoord.y); // posy
        case 3: return vec3(texCoord.x, -1.0, -texCoord.y); //negy
        case 4: return vec3(texCoord.x, -texCoord.y, 1.0); // posz
        case 5: return vec3(-texCoord.xy, -1.0); // negz
    }

    return vec3(0.0);
}

// Normal Distribution
float d_ggx(float dotNH, float roughness)
{
    float alpha = roughness * roughness;
    float alpha2 = alpha * alpha;
    float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
    return alpha2 / (PI * denom * denom); 
}